generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  email                 String                  @unique @db.VarChar(255)
  phone                 String                  @db.VarChar(10)
  password              String                  @db.VarChar(255)
  role_id               Int?
  created_at            DateTime                @default(now())
  FormResponse          FormResponse[]
  refreshTokens         RefreshToken[]
  userProvince          UserProvince[]
  role                  Role?                   @relation(fields: [role_id], references: [id])
  EventUserRelationship EventUserRelationship[]

  @@map("users")
}

model Role {
  id        Int    @id
  role_name String @db.VarChar(50)
  users     User[]

  @@map("role")
}

model Province {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  created_at   DateTime       @default(now())
  districts    districts[]
  userProvince UserProvince[]

  @@map("province")
}

model UserProvince {
  userId     String
  provinceId Int
  province   Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, provinceId])
  @@map("user_provinces")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  id           String   @id
  email        String
  otp          String
  type         OTPType
  expiresAt    DateTime
  isUsed       Boolean  @default(false)
  createdAt    DateTime @default(now())
  attempts     Int
  requestToken String   @unique

  @@index([email])
  @@index([otp])
  @@map("otps")
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdAt       DateTime          @default(now())
  EventCategories EventCategories[]
}

model districts {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  provinceId Int
  createdAt  DateTime    @default(now())
  province   Province    @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  locations  locations[]
}

model locations {
  id         Int       @id @default(autoincrement())
  street     String    @db.VarChar(255)
  ward       String    @db.VarChar(100)
  districtId Int
  createdAt  DateTime  @default(now())
  Events     Events[]
  districts  districts @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

model Form {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  createdBy    String?
  deleteAt     DateTime?
  FormInput    FormInput[]
  FormResponse FormResponse[]
  Showing      Showing[]
}

model FormAnswer {
  id             Int          @id @default(autoincrement())
  formResponseId Int
  formInputId    Int
  value          String?
  FormInput      FormInput    @relation(fields: [formInputId], references: [id], onDelete: Cascade)
  FormResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
}

model FormInput {
  id         Int          @id @default(autoincrement())
  formId     Int
  fieldName  String       @db.VarChar(255)
  type       String       @db.VarChar(50)
  required   Boolean      @default(true)
  regex      String?
  options    Json?
  deleteAt   DateTime?
  FormAnswer FormAnswer[]
  Form       Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormResponse {
  id         Int          @id @default(autoincrement())
  formId     Int
  createdAt  DateTime     @default(now())
  userId     String
  showingId  String?
  FormAnswer FormAnswer[]
  Form       Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  Showing    Showing?     @relation(fields: [showingId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [email], onDelete: Cascade)
  Ticket     Ticket[]
}

model PayOSInfo {
  bin           String?  @db.VarChar(20)
  accountNumber String?  @db.VarChar(50)
  accountName   String?  @db.VarChar(100)
  amount        Int
  description   String?  @db.VarChar(100)
  orderCode     Int      @unique
  currency      String?  @db.VarChar(10)
  paymentLinkId String?  @db.VarChar(50)
  status        String?  @db.VarChar(20)
  checkoutUrl   String?
  qrCode        String?
  createdAt     DateTime @default(now())
  expiredAt     String?
}

model PaymentInfo {
  id          Int           @id @default(autoincrement())
  method      PaymentMethod
  paymentCode Int
  paidAt      DateTime?
  orderInfoId String?
  OrderInfo   OrderInfo?    @relation(fields: [orderInfoId], references: [id], onDelete: Cascade)
  Ticket      Ticket[]
}

model PaymentMethodStatus {
  paymentMethod PaymentMethod @unique
  status        Boolean       @default(false)
}

model OrderInfo {
  id           String        @id @default(uuid())
  showingId    String
  ticketTypeId String?
  userId       String?
  quantity     Int?
  seatId       Int[]
  status       Int
  PaymentInfo  PaymentInfo[]
}

model TicketQRCode {
  id           String  @id @default(uuid())
  qrCode       String
  description  String
  seatId       Int?
  ticketId     String
  ticketTypeId String?
  isCheckedIn  Boolean @default(false)
  checkedBy    String  @default("")
  Ticket       Ticket  @relation(fields: [ticketId], references: [id])
}

model EventCategories {
  id         Int        @id @default(autoincrement())
  eventId    Int
  categoryId Int
  isSpecial  Boolean    @default(false)
  Categories Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Events     Events     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Images {
  id                                Int      @id @default(autoincrement())
  userId                            String?  @default("TicketBox")
  imageUrl                          String   @db.VarChar(255)
  Events_Events_imgLogoIdToImages   Events[] @relation("Events_imgLogoIdToImages")
  Events_Events_imgPosterIdToImages Events[] @relation("Events_imgPosterIdToImages")
}

model Ticket {
  id             String         @id @default(uuid())
  status         Int
  price          Int
  type           String
  paymentId      Int?
  formResponseId Int?
  mailSent       Boolean        @default(false)
  showingId      String
  userId         String?
  FormResponse   FormResponse?  @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
  PaymentInfo    PaymentInfo?   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  Showing        Showing        @relation(fields: [showingId], references: [id])
  TicketQRCode   TicketQRCode[]
}

model Events {
  id                                Int                     @id @default(autoincrement())
  title                             String                  @db.VarChar(255)
  description                       String?
  organizerId                       String?
  locationId                        Int?
  imgLogoId                         Int?
  imgPosterId                       Int?
  createdAt                         DateTime                @default(now())
  isOnlyOnEve                       Boolean                 @default(false)
  isSpecial                         Boolean                 @default(false)
  lastScore                         Decimal                 @db.Decimal(10, 2)
  totalClicks                       Int                     @default(0)
  weekClicks                        Int                     @default(0)
  venue                             String?                 @db.VarChar(100)
  isApproved                        Boolean                 @default(false)
  orgDescription                    String?
  orgName                           String?
  deleteAt                          DateTime?
  isOnline                          Boolean                 @default(false)
  EventCategories                   EventCategories[]
  Images_Events_imgLogoIdToImages   Images?                 @relation("Events_imgLogoIdToImages", fields: [imgLogoId], references: [id])
  Images_Events_imgPosterIdToImages Images?                 @relation("Events_imgPosterIdToImages", fields: [imgPosterId], references: [id])
  locations                         locations?              @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Showing                           Showing[]
  eventUserRelationships            EventUserRelationship[]
  UserClickHistory UserClickHistory[]
}

model Row {
  id        Int      @id @default(autoincrement())
  name      String
  sectionId Int
  createdAt DateTime @default(now())
  Section   Section  @relation(fields: [sectionId], references: [id])
  Seat      Seat[]
}

model Seat {
  id         Int          @id @default(autoincrement())
  name       String
  rowId      Int
  positionX  Float
  positionY  Float
  createdAt  DateTime     @default(now())
  position   Int
  Row        Row          @relation(fields: [rowId], references: [id])
  SeatStatus SeatStatus[]
}

model Section {
  id              Int                 @id @default(autoincrement())
  name            String
  seatmapId       Int
  isStage         Boolean
  element         Json
  attribute       Json
  createdAt       DateTime            @default(now())
  isReservingSeat Boolean             @default(false)
  Row             Row[]
  Seatmap         Seatmap             @relation(fields: [seatmapId], references: [id])
  ticketTypes     TicketTypeSection[]
}

model Seatmap {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  viewBox   String
  status    Int
  Section   Section[]
  Showing   Showing[]
}

model Showing {
  id                    String         @id @default(uuid())
  eventId               Int
  isFree                Boolean
  isSalable             Boolean
  isPresale             Boolean
  seatMapId             Int
  startTime             DateTime
  endTime               DateTime
  isEnabledQueueWaiting Boolean
  showAllSeats          Boolean
  formId                Int?
  deleteAt              DateTime?
  FormResponse          FormResponse[]
  SeatStatus            SeatStatus[]
  Events                Events         @relation(fields: [eventId], references: [id])
  Form                  Form?          @relation(fields: [formId], references: [id])
  Seatmap               Seatmap        @relation(fields: [seatMapId], references: [id])
  Ticket                Ticket[]
  TicketType            TicketType[]
}

model TicketType {
  id             String              @id @default(uuid())
  showingId      String
  name           String
  description    String
  color          String
  isFree         Boolean
  price          Int
  originalPrice  Int
  startTime      DateTime
  endTime        DateTime
  position       Int
  imageUrl       String
  maxQtyPerOrder Int
  minQtyPerOrder Int
  isHidden       Boolean             @default(false)
  quantity       Int?                @default(0)
  deleteAt       DateTime?
  Showing        Showing             @relation(fields: [showingId], references: [id])
  sections       TicketTypeSection[]
}

model SeatStatus {
  id        String  @id @default(uuid())
  showingId String
  status    Int
  seatId    Int
  seatMapId Int
  Seat      Seat    @relation(fields: [seatId], references: [id])
  Showing   Showing @relation(fields: [showingId], references: [id])
}

model TicketTypeSection {
  ticketTypeId String
  sectionId    Int
  Section      Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  TicketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)

  @@id([ticketTypeId, sectionId])
}

model OrgPaymentInfo {
  id            String   @id @default(uuid())
  eventId       Int
  organizerId   String
  accountName   String
  accountNumber String
  bankName      String
  branch        String
  businessType  Int
  fullName      String?
  address       String?
  taxCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)
}

enum OTPType {
  FORGOT_PASSWORD
  REGISTER
}

enum PaymentMethod {
  PAYOS
  MOMO
}

model EventUserRelationship {
  eventId   Int
  userId    String
  email     String
  role      Int?
  role_desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRole  EventRole?  @relation("EventRoleToEventUserRelationship", fields: [role], references: [id])

  @@id([eventId, userId])
}


model EventRole {
  id           Int    @id
  isEdited     Boolean
  isSummarized Boolean
  viewVoucher  Boolean
  marketing    Boolean
  viewOrder    Boolean
  viewSeatmap  Boolean
  viewMember   Boolean
  checkin      Boolean
  checkout     Boolean
  redeem       Boolean

  userRoles    EventUserRelationship[]  @relation("EventRoleToEventUserRelationship")

  @@map("event_role")
}

model UserClickHistory {
  id      String   @id @default(uuid())
  eventId Int
  userId  String   // can be a real user ID or random UUID
  date    DateTime @default(now())

  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("user_click_history")
}